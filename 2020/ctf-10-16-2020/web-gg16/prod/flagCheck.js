function checkFlag(flag) {
    const code = [
        0x09, 0x00, 0x1c, 0x00, 0x28, 0x00, 0x0a, 0x01, 0x00, 0x02, 0x01, 0x00, 0x01, 0x0b, 0x02, 0x01, 0x04, 0x02, 0x0d, 0x00, 0x02, 0x02, 0x11, 0x00, 0x0c, 0x01, 0x02, 0x02, 0x00, 0x02, 0x00, 0x08, 0xde, 0xff, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x1e, 0x00, 0x28, 0x00, 0x0a, 0x01, 0x00, 0x02, 0x01, 0x00, 0x01, 0x0b, 0x02, 0x01, 0x02, 0x01, 0x00, 0x01, 0x0b, 0x03, 0x01, 0x0d, 0x02, 0x03, 0x01, 0x00, 0xff, 0x02, 0x00, 0x02, 0x00, 0x08, 0xdc, 0xff, 0xaa, 0xaf,
    ];

    mmu = new MMU(code);

    enc = [2,6,245,5,63,5,141,5,254,4,76,5,80,6,50,5,154,5,2,6,228,4,76,5,245,5,228,4,15,6,89,5,37,5,141,5,228,4,106,6];
    for(let i = 0; i < enc.length; i++){
        mmu.writeByte(0x200 + i, enc[i]);
    }

    for(let i = 0; i < flag.length; i++){
        mmu.writeByte(0x100 + i * 2, flag.charCodeAt(i));
    }

    cpu = new CPU(mmu);

    while(true) {
        try {
            cpu.evalInstr();
        }catch(e) {
            if(e === "invalid opcode: aa") {
                return true;
            }
            return false;
        }
    }
}